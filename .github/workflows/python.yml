name: Python Code Quality Check

on:
  pull_request:
    types: [labeled]
env:
  pythonLocation: ""
# trunk-ignore(checkov/CKV2_GHA_1)
permissions: write-all

jobs:
  build:
    if: github.event.label.description == 'Python Code Quality Check'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    name: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get package name
        id: get-package-name
        run: |
          echo "PACKAGE_NAME=$(grep 'name' ./setup.py | sed -E 's/.*name\s*=\s*["'"'"']([^"'"'"']+)["'"'"'].*/\1/')" >> $GITHUB_OUTPUT
      - name: Get commit hash
        id: get-commit-hash
        run: |
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH8=$(git rev-parse HEAD | cut -c 1-8)" >> $GITHUB_OUTPUT
      - name: Get job name
        id: get-job-name
        uses: ayachensiyuan/get-action-job-id@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          job-name: ${{ matrix.python-version }}
      - name: Set commit status - all pending
        id: set-commit-status-all-pending
        run: |
          tools=("Coverage" "Pytest" "Mypy" "Pylint")

          for tool in "${tools[@]}"; do
            gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${GITHUB_REPOSITORY}/statuses/${{ steps.get-commit-hash.outputs.COMMIT_HASH }} \
            -f state='pending' \
            -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/job/${{ steps.get-job-name.outputs.jobId }}" \
            -f description="(pending / ${{ steps.get-commit-hash.outputs.COMMIT_HASH8 }})" \
            -f context="$tool"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python ${{ matrix.python-version }}
        id: set-up-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-requirements
        with:
          path: |
            ${{ env.pythonLocation }}
            !${{ env.pythonLocation }}/**/site-packages/${{ steps.get-package-name.outputs.PACKAGE_NAME }}*/
          key: ${{ env.pythonLocation }}-${{ hashFiles('./requirements.txt') }}-${{ hashFiles('./requirements-dev.txt') }}
      - name: Access the cache for (pip, pylint, mypy, pytest, py)
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pylint
            ./.mypy_cache
            ./.pytest_cache
            **/__pycache__/
            ${{ env.pythonLocation }}/**/site-packages/${{ steps.get-package-name.outputs.PACKAGE_NAME }}*/
          key: ${{ env.pythonLocation }}-${{ hashFiles('./setup.py') }}
      - run: pip install '.[test]'
      - name: Run Pylint
        id: run-pylint
        run: |
          pylint $(git ls-files '*.py') --rcfile=./.pylintrc | tee pylint.txt
          echo "EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        continue-on-error: true
      - name: Update commit status - Pylint
        id: update-commit-status-pylint
        run: |
          if [ "${{ steps.run-pylint.outcome }}" = "success" ] && [ ! -z "${{ steps.run-pylint.outputs.EXIT_CODE }}" ] && [ ${{ steps.run-pylint.outputs.EXIT_CODE }} -eq 0 ]; then
            state="success"
            description="$(grep -Eo "Your code has been rated at [0-9]*\.[0-9]*/10" "pylint.txt")"
          elif [ "${{ steps.run-pylint.outcome }}" != "success" ] && [ ! -z "${{ steps.run-pylint.outputs.EXIT_CODE }}" ] && [ ${{ steps.run-pylint.outputs.EXIT_CODE }} -ne 0 ]; then
            state="failure"
            description="step failing"
          elif [ "${{ steps.run-pylint.outcome }}" = "success" ] && [ ! -z "${{ steps.run-pylint.outputs.EXIT_CODE }}" ] && [ ${{ steps.run-pylint.outputs.EXIT_CODE }} -ne 0 ]; then
            state="error"
            description="$(grep -Eo "Your code has been rated at [0-9]*\.[0-9]*/10" "pylint.txt")"
          fi

          echo "state: $state"
          echo "description: $description"

          gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${GITHUB_REPOSITORY}/statuses/${{ steps.get-commit-hash.outputs.COMMIT_HASH }} \
          -f state="$state" \
          -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/job/${{ steps.get-job-name.outputs.jobId }}#step:11:1" \
          -f description="($state / ${{ steps.get-commit-hash.outputs.COMMIT_HASH8 }}) $description" \
          -f context="Pylint"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Mypy
        id: run-mypy
        run: |
          mypy . | tee mypy.txt
          echo "EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        continue-on-error: true
      - name: Update commit status - Mypy
        id: update-commit-status-mypy
        run: |
          if [ "${{ steps.run-mypy.outcome }}" = "success" ] && [ ! -z "${{ steps.run-mypy.outputs.EXIT_CODE }}" ] && [ ${{ steps.run-mypy.outputs.EXIT_CODE }} -eq 0 ]; then
            state="success"
            description="$(tail -1 "mypy.txt")"
          elif [ "${{ steps.run-mypy.outcome }}" != "success" ] && [ ! -z "${{ steps.run-mypy.outputs.EXIT_CODE }}" ] && [ ${{ steps.run-mypy.outputs.EXIT_CODE }} -ne 0 ]; then
            state="failure"
            description="step failing"
          elif [ "${{ steps.run-mypy.outcome }}" = "success" ] && [ ! -z "${{ steps.run-mypy.outputs.EXIT_CODE }}" ] && [ ${{ steps.run-mypy.outputs.EXIT_CODE }} -ne 0 ]; then
            state="error"
            description="$(tail -1 "mypy.txt")"
          fi

          echo "state: $state"
          echo "description: $description"

          gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${GITHUB_REPOSITORY}/statuses/${{ steps.get-commit-hash.outputs.COMMIT_HASH }} \
          -f state="$state" \
          -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/job/${{ steps.get-job-name.outputs.jobId }}#step:13:1" \
          -f description="($state / ${{ steps.get-commit-hash.outputs.COMMIT_HASH8 }}) $description" \
          -f context="Mypy"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Pytest
        id: run-pytest
        run: |
          pytest -c pytest.ini | tee pytest.txt
          echo "EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        continue-on-error: true
      - name: Update commit status - Pytest
        id: update-commit-status-pytest
        run: |
          if [ "${{ steps.run-pytest.outcome }}" = "success" ] && [ ! -z "${{ steps.run-pytest.outputs.EXIT_CODE }}" ] && [ ${{ steps.run-pytest.outputs.EXIT_CODE }} -eq 0 ]; then
            state="success"
            description="$(tail -1 "pytest.txt" | tr -d = | awk '{$1=$1};1')"
          elif [ "${{ steps.run-pytest.outcome }}" != "success" ] && [ ! -z "${{ steps.run-pytest.outputs.EXIT_CODE }}" ] && [ ${{ steps.run-pytest.outputs.EXIT_CODE }} -ne 0 ]; then
            state="failure"
            description="step failing"
          elif [ "${{ steps.run-pytest.outcome }}" = "success" ] && [ ! -z "${{ steps.run-pytest.outputs.EXIT_CODE }}" ] && [ ${{ steps.run-pytest.outputs.EXIT_CODE }} -ne 0 ]; then
            state="error"
            description="$(tail -1 "pytest.txt" | tr -d = | awk '{$1=$1};1')"
          fi

          echo "state: $state"
          echo "description: $description"

          gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${GITHUB_REPOSITORY}/statuses/${{ steps.get-commit-hash.outputs.COMMIT_HASH }} \
          -f state="$state" \
          -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/job/${{ steps.get-job-name.outputs.jobId }}#step:15:1" \
          -f description="($state / ${{ steps.get-commit-hash.outputs.COMMIT_HASH8 }}) $description" \
          -f context="Pytest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Show Coverage Report
        id: show-coverage-report
        run: |
          coverage report | tee coverage.txt
          echo "EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        continue-on-error: true
      - name: Update commit status - Coverage
        id: update-commit-status-coverage
        run: |
          COVERAGERC_FILE=".coveragerc"
          fail_under_value=$(grep -E '^\s*fail_under\s*=' "$COVERAGERC_FILE" | awk -F '=' '{gsub(/[ \t]+$/, "", $2); print $2}')
          threshold=$(printf "%.2f" "$fail_under_value")

          COVERAGE_FILE="coverage.txt"
          coverage=$(awk '/^TOTAL/ {print $NF}' "$COVERAGE_FILE")

          if [ "${{ steps.show-coverage-report.outcome }}" = "success" ] && [ ! -z "${{ steps.show-coverage-report.outputs.EXIT_CODE }}" ] && [ ${{ steps.show-coverage-report.outputs.EXIT_CODE }} -eq 0 ]; then
            state="success"
            description="$coverage / $threshold%"
          elif [ "${{ steps.show-coverage-report.outcome }}" != "success" ] && [ ! -z "${{ steps.show-coverage-report.outputs.EXIT_CODE }}" ] && [ ${{ steps.show-coverage-report.outputs.EXIT_CODE }} -ne 0 ]; then
            state="failure"
            description="step failing"
          elif [ "${{ steps.show-coverage-report.outcome }}" = "success" ] && [ ! -z "${{ steps.show-coverage-report.outputs.EXIT_CODE }}" ] && [ ${{ steps.show-coverage-report.outputs.EXIT_CODE }} -ne 0 ]; then
            state="error"
            description="$coverage / $threshold%"
          fi

          echo "state: $state"
          echo "description: $description"

          gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${GITHUB_REPOSITORY}/statuses/${{ steps.get-commit-hash.outputs.COMMIT_HASH }} \
          -f state="$state" \
          -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/job/${{ steps.get-job-name.outputs.jobId }}#step:17:1" \
          -f description="($state / ${{ steps.get-commit-hash.outputs.COMMIT_HASH8 }}) $description" \
          -f context="Coverage"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.removeLabel({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: ["${{ github.event.label.name }}"]
            })
